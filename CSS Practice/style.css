/* External CSS */
/* External CSS is a separate CSS file that is linked to an HTML document. */
/* It allows you to apply styles to multiple HTML documents by linking the same CSS file. */
.external-css {
    color: green;
}

/* CSS Selectors Start*/

/* Universal Selector */
/* Universal Selector Selects all elements. */
/* The universal selector is represented by an asterisk (*). It applies styles to all elements in the document. */
/* For example, the following CSS will apply gray color to all elements: */
* {
    color: gray;
}


/* Type (Element) Selector */
/* The type selector selects elements based on their tag name. It applies styles to all elements of that type. */
/* The type selector is simply the name of the element without any prefix. */
/* For example, the following CSS will apply red color to all <li> elements: */
li {
    color: red;
}

/* Class Selector */
/* The class selector selects elements based on their class attribute. It applies styles to all elements with that class. */
/* The class selector is represented by a period (.) followed by the class name. */
/* For example, the following CSS will apply blue color to all elements with class "class-selector": */
.class-selector {
    color: blue;
}

/* ID Selector */
/* The ID selector selects a single element based on its ID attribute. It applies styles to the element with that ID. */
/* The ID selector is represented by a hash (#) followed by the ID name. */
/* For example, the following CSS will apply purple color to the element with ID "id-selector": */
#id-selector {
    color: purple;
}

/* Attribute Selector */
/* The attribute selector selects elements based on the presence or value of an attribute. */
/* The attribute selector is represented by square brackets ([]) containing the attribute name or value. */
/* For example, the following CSS will apply orange color to all elements with type attribute equal to "square": */
[type="square"] {
    color: orange;
}

/* Descendant Selector */
/* The descendant selector selects elements that are descendants of a specified element. */
/* It applies styles to elements that are nested within another element. */
/* The descendant selector is represented by a space between two selectors. */
/* For example, the following CSS will apply green color to all <li> elements that are descendants of a <ul> element: */
ul .descendant-selector {
    color: black;
}

/* Child Selector */
/* The child selector selects elements that are direct children of a specified element. */
/* It applies styles to elements that are immediate children of another element. */
/* The child selector is represented by a greater-than sign (>) between two selectors. */
/* For example, the following CSS will apply dark blue color to all <li> elements that are direct children of a <ul> element: */
ul>.child-selector {
    color: darkblue;
}

/* Adjacent Selector OR Sibling Selector */
/* The adjacent selector selects an element that is immediately preceded by another specified element. */
/* It applies styles to an element that comes directly after another element. */
/* The adjacent selector is represented by a plus sign (+) between two selectors. */
/* For example, the following CSS will apply dark red color to an element with class "adjacent-selector" that comes immediately after an element with class "child-selector": */
.child-selector+.adjacent-selector {
    color: darkred;
}

/* general sibling selector */
/* The general sibling selector selects all elements that are siblings of a specified element. */
/* It applies styles to elements that share the same parent as another specified element. */
/* The general sibling selector is represented by a tilde (~) between two selectors. */
/* For example, the following CSS will apply green color to all elements with class "general-sibling-selector" that are siblings of an <li> element: */
li~.general-sibling-selector {
    color: green;
}

/* pseudo classes */
/* Pseudo-classes are used to define the special state of an element. */
/* For example, the following CSS will apply burlywood color to an element with class "pseudo-classes" when it is hovered over: */
.pseudo-classes:hover {
    color: burlywood;
}

/* pseudo elements */
/* Pseudo-elements are used to style a specific part of an element. */
/* For example, the following CSS will apply green color to the first letter of an element with class "pseudo-elements": */
.pseudo-elements::first-letter {
    color: green;
}

/* group selector */
/* The group selector allows you to apply the same styles to multiple selectors. */
/* It is represented by a comma (,) separating multiple selectors. */
.group-selector,
.another-group-selector {
    color: orange;
}

/* negation-pseudo-class */
/* The negation pseudo-class allows you to select elements that do not match a specified selector. */
/* It is represented by :not() syntax. */
/* For example, the following CSS will apply mediumaquamarine color to all elements that do not have class "negation-pseudo-class": */
/* commenting out, uncomment when needed */
/* :not(.negation-pseudo-class) {
    color: mediumaquamarine;
} */

/* structural-pseudo-classes */
/* Structural pseudo-classes are used to style elements based on their position in the document tree. */
/* For example, the following CSS will apply lightblue color to all <li> elements that are the 14th child of their parent: */
li:nth-child(14) {
    color: lightblue;
}

/* dynamic-pseudo-classes */
/* Dynamic pseudo-classes are used to style elements based on user interaction or other dynamic changes. */
/* For example, the following CSS will apply lightcoral color to all <li> elements when they are focused: */
.dynamic-pseudo-classes:focus {
    color: lightcoral;
}

/* CSS Selectors End*/


/* Table Styles Start */
table {
    border-collapse: collapse;
    width: auto;
}

table caption {
    font-weight: bold;
    border: 1px solid black;
    padding: 8px
}

table,
th,
td {
    border: 1px solid black;
}

th,
td {
    padding: 8px;
    text-align: left;
}

/* Table Styles End */


/* CSS Specificity - Practice Start */

span.specificity-span {
    color: red
}

#id-selector-practice {
    color: blue;
}

.class-selector-practice {
    color: blue
}

span {
    color: blue;
}

#id-vs-class-practice {
    color: green;
}

.id-vs-class-practice {
    color: blue;
}

#id-vs-element-practice {
    color: green;
}

.class-vs-element-practice {
    color: green
}

.class-vs-descendant-selector {
    color: green;
}

td span {
    color: blue;
}

.class-vs-descendant-class-selector {
    color: green;
}

td .class-vs-descendant-class-selector {
    color: blue;
}

/* CSS Specificity - Practice End */

/* CSS Display - Start*/

.display-block {
    background-color: lightblue;
}

.display-inline {
    background-color: lightgreen;
}

.display-none {
    display: none;
}

/* CSS Display - End */

/* CSS Positioning - Start */

section#static {
    background-color: rgb(215, 210, 210);
    border: 1px solid black;
    padding: 20px;
}

section#static h3, section#static p {
    color: #000;
}


.static-position {
    position: static;
    color: #fff;
    background-color: rgb(242, 109, 109);
    border: 1px solid black;
    width: 100px;
    height: 100px;
}


section#relative {
    background-color: rgb(215, 210, 210);
    border: 1px solid black;
    padding: 20px;
}

section#relative h3, section#relative p {
    color: #000;
}


.relative-position {
    position: relative;
    color: #fff;
    background-color: rgb(93, 87, 87);
    border: 1px solid black;
    width: 100px;
    height: 100px;
    top: 20px; 
    left: 100px;
}

section#absolute {
    position: relative; /* for testing absolute positioning in this section */
    background-color: rgb(77, 42, 42);
    border: 1px solid black;
    padding: 20px;
}

section#absolute h3, section#absolute p {
    color: #fff;
}


.absolute-position {
    position: absolute;
    color: #000;
    background-color: rgb(222, 195, 195);
    border: 1px solid black;
    width: 100px;
    height: 100px;
    bottom: 100px;
    right: 0px;
}

section#fixed {
    background-color: rgb(176, 192, 232);
    border: 1px solid black;
    padding: 20px;
}

section#fixed h3, section#fixed p {
    color: #fff;
}


.fixed-position {
    position: fixed;
    color: #000;
    background-color: rgb(149, 208, 215);
    border: 1px solid black;
    width: 100px;
    height: 100px;
    bottom: 0;
    right: 0;
}

section#sticky {
    background-color: rgb(176, 192, 232);
    border: 1px solid black;
    padding: 20px;
}

section#sticky h3, section#sticky p {
    color: #fff;
}


.sticky-position {
    position: sticky;
    color: #fff;
    background-color: rgb(48, 128, 136);
    border: 1px solid black;
    width: 100px;
    height: 100px;
    top: 0;
    right: 0;
}

/* CSS Positioning - End */